<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>labs@tmw</title>
		<description>TMW agency&#39;s tech blog</description>
		<link>http://labs.tmw.co.uk</link>
		<atom:link href="http://labs.tmw.co.uk/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>SwiftClick</title>
				<description>&lt;p&gt;As many of you will have experienced when using touch devices such as iPhones, clicking on HTML elements sometimes feels a bit sluggish. This is because there is a &lt;a href=&quot;http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away&quot;&gt;300ms delay&lt;/a&gt; before click events are fired. As a user experience this is clunky behaviour and so the exploration of potential solutions to this problem worked its way into our labs here at TMW. Since the issue only occurs on devices that support touch events our initial approach was to simply run a basic test for touch support and create a variable for the event name to use in click listeners – the value of which being either &#39;touchstart&#39; for devices that support touch, or &#39;click&#39; for those that don&#39;t:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var clickEventType = &quot;ontouchstart&quot; in window ? &quot;touchstart&quot; : &quot;click&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem with this detection method is that laptops or monitors that support touch would expect a touch event, meaning that if a mouse was being used then click events wouldn&#39;t work. Because of this the detection method was refined to check if the device supports both touch and orientation change and only use touch events if both conditions are met:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var clickEventType = &quot;onorientationchange&quot; in window &amp;amp;&amp;amp; &quot;ontouchstart&quot; in window ? &quot;touchstart&quot; : &quot;click&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This detection method worked well in the majority of situations we needed.&lt;/p&gt;

&lt;p&gt;We would then use the &lt;code&gt;&#39;clickEventType&#39;&lt;/code&gt; variable in any event listeners that needed to get a click event:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;someEl.addEventListener (clickEventType, fn, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This worked pretty nicely, with the main drawback being the fact that we would need to ensure the &#39;clickEventType&#39; variable was used anywhere we needed to add a click listener, which can be problematic when projects are picked up by new developers who may not necessarily realise that this variable is being used at all.&lt;/p&gt;

&lt;p&gt;Other options were explored and we started to use a really nice utility called &lt;a href=&quot;https://github.com/ftlabs/fastclick&quot;&gt;FastClick&lt;/a&gt;, developed by &lt;a href=&quot;https://github.com/ftlabs&quot;&gt;FT Labs&lt;/a&gt;. FastClick hijacks regular click events and turns them into touch events when necessary. This allows JavaScript event listeners to be registered using the normal &#39;click&#39; event type.&lt;/p&gt;

&lt;p&gt;For the most part this worked really well, but we eventually began to find that the util sometimes exhibited strange behaviour, such as events not firing when links were clicked and then firing later on, at the same time as other click events when different elements were clicked. And at 25kb non-minified (2349 bytes minified &amp;amp; gzipped) it is also quite heavy in file size when considering the simple way in which we needed to use it. We therefore felt the time was right to create our own solution – &lt;a href=&quot;https://github.com/tmwagency/swiftclick&quot;&gt;SwiftClick&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SwiftClick is heavily based on FastClick, but was designed to be super lightweight — weighing in at a mere 5KB non-minified and a teeny-tiny 374 bytes minified &amp;amp; gzipped.&lt;/p&gt;

&lt;p&gt;In contrast with FastClick, which does a lot under the hood to fix obscure browser bugs for complex elements like form, select, and textarea, by default SwiftClick focuses on basic element types that are typically used in modern interactive development and so these bugs are not a big concern.&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;p&gt;Firstly, grab either the &lt;a href=&quot;https://raw2.github.com/tmwagency/swiftclick/master/js/dist/swiftclick.min.js&quot;&gt;minified&lt;/a&gt;, or &lt;a href=&quot;https://raw2.github.com/tmwagency/swiftclick/master/js/libs/swiftclick.js&quot;&gt;non-minified&lt;/a&gt; source from Github, or install via Bower using the following command in your command prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install swiftclick
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Include SwiftClick in your application&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;application/javascript&quot; src=&quot;path/to/swiftclick.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Setup SwiftClick&lt;/h3&gt;

&lt;p&gt;Setting up SwiftClick is a very easy process, which mirrors that of FastClick in that instances must be attached to a context element. Click events from all elements within the context element are automatically captured and converted to touch events when necessary.&lt;/p&gt;

&lt;p&gt;Start by creating a reference to a new instance of SwiftClick using the &#39;attach&#39; helper method and attach it to a context element. Attaching to document.body is easiest if you only need a single instance of SwiftClick:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var swiftclick = SwiftClick.attach (document.body);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If necessary, multiple instances of SwiftClick can be created for specific context elements which, although not really necessary in most cases, can sometimes be useful for optimising applications with a large amount of HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var navigationSwiftClick = SwiftClick.attach (someNavElement);
var uiSwiftClick = SwiftClick.attach (someOtherElement);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Default Elements&lt;/h3&gt;

&lt;p&gt;Once attached, by default SwiftClick will track events originating from the following element types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Adding non-default element types&lt;/h3&gt;

&lt;p&gt;If necessary you can make SwiftClick track events originating from additional element types by adding an array of node names. This requires a reference to an instance of SwiftClick:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var swiftclick = SwiftClick.attach (someElement);
swiftclick.addNodeNamesToTrack ([&quot;p&quot;, &quot;h1&quot;, &quot;nav&quot;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Replacing all stored node names to track&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var swiftclick = SwiftClick.attach (someElement);
swiftclick.replaceNodeNamesToTrack ([&quot;a&quot;, &quot;div&quot;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doing this will remove all default node names, as well as any that have been added, and replace them with the node names within the array that is passed in, resulting in only the new node names being tracked.&lt;/p&gt;

&lt;h3&gt;Automatically disabled when not needed&lt;/h3&gt;

&lt;p&gt;SwiftClick only intercepts events for touch devices that support orientation change, otherwise it just sits there looking pretty.&lt;/p&gt;

&lt;h2&gt;About the Project&lt;/h2&gt;

&lt;p&gt;SwiftClick was developed and is currently maintained by &lt;a href=&quot;https://twitter.com/munkychop&quot;&gt;Ivan Hayes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Head over to the Github &lt;a href=&quot;https://github.com/tmwagency/swiftclick&quot;&gt;project page&lt;/a&gt; to find out more. Go ahead and star the project to keep up with its latest developments :-)&lt;/p&gt;
</description>
				<pubDate>Fri, 10 Jan 2014 09:30:00 +0000</pubDate>
				<link>http://labs.tmw.co.uk/2014/01/SwiftClick</link>
				
				<username>@munkychop</username>
				<guid isPermaLink="true">http://labs.tmw.co.uk//2014/01/SwiftClick</guid>
			</item>
		
			<item>
				<title>Structuring team development</title>
				<description>&lt;p&gt;Every development team has their own way of working together.  Here at TMW, we are no different (other than perhaps having an unhealthy obsession with cake).&lt;/p&gt;

&lt;p&gt;The Creative Tech team at TMW was put together just over 18 months ago, back in April 2012, when &lt;a href=&quot;https://twitter.com/mrmartineau&quot;&gt;Zander&lt;/a&gt; and I joined the company.  Before that point, there was little structure in the front-end development work being done; no documented guidelines, no frameworks.&lt;/p&gt;

&lt;p&gt;Not having these development tools in place before, though not ideal, gave us a massive opportunity and was one of the reasons I relished taking on the role at TMW. We had the opportunity to shape the way our team would work right from the start, which is usually a situation only afforded to start-ups.&lt;/p&gt;

&lt;p&gt;Our aim was, and still is, to put just enough in place to ensure the whole team is working on the same page. Both Zander and myself had worked on projects where something as basic as the core structure could become a major stumbling block to anyone else joining the team and we wanted to rectify these types of issues right from the start.&lt;/p&gt;

&lt;p&gt;The team has now grown to 6 people – a mix of Creative Technologists and Interactive Developers – and the processes established when there were only 2 of us in the team have only needed to be tweaked during that growth, rather than completely overhauled.&lt;/p&gt;

&lt;p&gt;So I just wanted to share the tools we have used to help our team, which could potentially help any development team of any size. I&#39;ll also take you through some of the resources we&#39;ve started to build up that assist in our development efforts, and that we&#39;ve been making openly available.&lt;/p&gt;

&lt;h2&gt;Define your way of working&lt;/h2&gt;

&lt;p&gt;One of the first things we did was to draw up a set of &lt;a href=&quot;http://tmwagency.github.io/TMW-frontend-guidelines/&quot;&gt;guidelines and standards&lt;/a&gt; for how we develop.&lt;/p&gt;

&lt;p&gt;No matter what the size of the team, you should know what standards and code conventions you are all developing to, ensuring that they&#39;re consistent. This means that whatever the project, consistency is key; it should look like code that a member of your team has written, instead of requiring complex deciphering.  As a team, decide how you want to standardise this and document it.&lt;/p&gt;

&lt;p&gt;Writing documentation from scratch can be a barrier for some, so instead take an existing set and adjust it to your needs. Our TMW guidelines took inspiration from Isobar&#39;s &lt;a href=&quot;http://isobar-idev.github.io/code-standards/&quot;&gt;&#39;Front-end Code Standards &amp;amp; Best Practices&#39;&lt;/a&gt; and Harry Roberts &lt;a href=&quot;https://github.com/csswizardry/CSS-Guidelines&quot;&gt;&#39;CSS Guidelines&#39;&lt;/a&gt;, using the bits we agreed with and building on top of them with our own documentation.&lt;/p&gt;

&lt;p&gt;Documenting these decisions can have all sorts of benefits. New starters immediately have something that informs them on team development standards.  It also helps to control the output of freelancers, as it acts as a reference for the standard of code you expect them to create.&lt;/p&gt;

&lt;p&gt;Above all, it acts as an evolving reference point for your team; you can refer anyone to it so that they can find details of the way in which you work. We&#39;ve found this useful when hiring to show potential team members that we care about the work we produce, as well as the fact that it&#39;s an open document, which allows clients to see the the way in which we work.&lt;/p&gt;

&lt;h2&gt;Structure your codebase&lt;/h2&gt;

&lt;p&gt;Another issue we have come across in the past is front-end structure. When editing a project that another team member has created, you should know where things are. It should never feel like you&#39;re having to play a game of &#39;guess where the CSS and JS files are hiding&#39; – a game I recommend you avoid playing with your family this Christmas.&lt;/p&gt;

&lt;p&gt;To solve this issue, we built our own framework for use on internal projects called &lt;a href=&quot;http://tmwagency.github.io/kickoff/&quot;&gt;Kickoff&lt;/a&gt; which Zander &lt;a href=&quot;labs.tmw.co.uk/2013/12/introducing-kickoff/&quot;&gt;wrote about in more detail&lt;/a&gt; last week.&lt;/p&gt;

&lt;p&gt;We didn&#39;t want the bloat of using &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, while also wanting a level of control over the evolving structure of our projects without relying on a third party framework. Kickoff is therefore more minimal, made to create consistent structure rather than enforcing coding style.&lt;/p&gt;

&lt;p&gt;We actively maintain Kickoff, looking at aspects of other frameworks and changing parts of it to keep up with the evolution of front-end development.&lt;/p&gt;

&lt;p&gt;Like documentation, not everyone will want to, or have the time to, maintain their own framework. What I would advise is that you choose a consistent framework across your projects. There&#39;s little point in using &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; on one project and then &lt;a href=&quot;http://foundation.zurb.com/&quot;&gt;Foundation&lt;/a&gt; on the next.  You&#39;ll just end up with lots of projects with inconsistent structures, making maintaining them harder.&lt;/p&gt;

&lt;p&gt;If you don&#39;t use a framework and want to use one, checkout &lt;a href=&quot;http://tmwagency.github.io/kickoff/&quot;&gt;Kickoff&lt;/a&gt;, or take a look at the &lt;a href=&quot;http://usablica.github.io/front-end-frameworks/compare.html&quot;&gt;vast array of frameworks&lt;/a&gt; already out there.&lt;/p&gt;

&lt;h2&gt;Re-use what you&#39;ve built&lt;/h2&gt;

&lt;p&gt;Something we&#39;ve started to do more as the team has grown is to make our code more portable across projects and between team members, so we can reuse code snippets more readily in the future.&lt;/p&gt;

&lt;p&gt;We maintain a few useful &lt;a href=&quot;https://github.com/tmwagency/js-classes-and-plugins&quot;&gt;JavaScript classes and plugins&lt;/a&gt; on Github, for things like image preloading and adaptive images. Slightly bigger libraries are typically split into separate repos, like &lt;a href=&quot;https://github.com/tmwagency/swiftclick&quot;&gt;SwiftClick&lt;/a&gt;. And we also try to white-label projects so that the majority of the codebase doesn&#39;t become client-specific, for example we&#39;ve recently been working on some generic node applications which will save a great deal of development time when reused.&lt;/p&gt;

&lt;p&gt;We also maintain frequently used snippets within our framework, whether that&#39;s &lt;a href=&quot;https://github.com/tmwagency/kickoff/tree/master/js/helpers&quot;&gt;maintaining useful JavaScript helpers&lt;/a&gt; or &lt;a href=&quot;https://github.com/tmwagency/kickoff/tree/master/scss/mixins&quot;&gt;useful SASS mixins&lt;/a&gt; that can be reused on any project.&lt;/p&gt;

&lt;p&gt;We&#39;ll be writing about some of these in more detail in future posts, but what I want to emphasise is the importance of making the effort to make your code portable between projects and team members. Even if you work mostly on your own, spending the time to make a useful piece of code portable and putting it somewhere you can easily access it can save hours down the line.&lt;/p&gt;

&lt;p&gt;Within a team, the hardest part of this is actually knowing what has been built previously that you can then use yourself. Github helps us manage this, as it allows us to commit code we think could be of use on any project and all of the members of our team will get a notification and know where to find it.&lt;/p&gt;

&lt;p&gt;Building this culture into your team will reap dividends, and is something we&#39;re working hard on within our team here at TMW.&lt;/p&gt;

&lt;h2&gt;Build for the future&lt;/h2&gt;

&lt;p&gt;The main goal is always to build with the future in mind. What would I care about if I got pulled onto a project half-way through? The aim is to help deal with the common frustrations we all feel when in this situation.&lt;/p&gt;

&lt;p&gt;Keeping things consistent means that people are better oriented with the project style and structure at whatever point they start working with the codebase. I always know where the Grunt file lives, where the responsive mixins are located and where typography related CSS styles go in our SASS structure.&lt;/p&gt;

&lt;p&gt;Some of these may seem like small things, but they can all add up to save a lot of time down the line. They may take time to put in place, but I can assure you it&#39;ll be worth the effort.&lt;/p&gt;
</description>
				<pubDate>Thu, 19 Dec 2013 12:00:00 +0000</pubDate>
				<link>http://labs.tmw.co.uk/2013/12/structuring-team-development</link>
				
				<username>@AshNolan_</username>
				<guid isPermaLink="true">http://labs.tmw.co.uk//2013/12/structuring-team-development</guid>
			</item>
		
			<item>
				<title>A designers adventures in game development: part 1</title>
				<description>&lt;p&gt;Over the years I&#39;ve had an interest in programming starting with Flash, a few years ago though I made the seemingly &lt;a href=&quot;http://www.apple.com/hotnews/thoughts-on-flash/&quot;&gt;obvious choice&lt;/a&gt; to start moving on from Actionscript to focus on Javascript. I find that the best way to learn is by doing, so since the start of the summer I started creating a little responsive HTML and Javascript game. This and subsequent posts will document my process.&lt;/p&gt;

&lt;p&gt;It&#39;s working title is &lt;strong&gt;‘Bitmap Adventure’&lt;/strong&gt; with the story revolving around a huge villain, in the form of a block-like Monkey, kidnapping a Goat’s child. Rescuing the child and defeating the villain is your main challenge.&lt;/p&gt;

&lt;p&gt;The battle system uses Paper, Scissors, Stone (otherwise known as Janken). The visualisation of these battles uses some some basic pixel animation with cute, simple versions of the warriors. To introduce players to the battle system I decided to feature a battle in the intro itself, where you attempt to battle the villain straight away, but with battle inexperience so early on in the game you’ll lose; its all part of the intro. I’m still working on how a levelling / experience feature will work within the game.&lt;/p&gt;

&lt;p&gt;Developing the intro helped to get my head around how the game would work on different devices from the start. I started off with a 320px wide photoshop document when I was creating a look and feel for the game, figuring out the mobile look and size first. The reason behind this is the game could get complex so its easier to add than take away from the intended design. There were many cases of developing prototypes and designing at the same time, to ensure it looked great across all devices. With such a simple graphical style, it&#39;s a little easier to add filler for wider screen formats. Supporting Retina devices couldn’t be easier with this, as all the original sprites just needed to be resized to 200% with Nearest Neighbour image resampling to preserve the hard pixel edges.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/img/blog/adventures-in-game-dev/post1-b.jpg&quot; alt=&quot;Positioning elements&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The game is still in the early stages, with the intro 90% complete, and the game area coming along nicely in both design and development. All the levels, weather parameters and portal positions are all managed through settings in a JSON file, which makes it easier to manage and update when needed. Levels are designed in Photoshop using tiles fitting to a 40px x 40px grid, which are then positioned in the game converting the JSON data into CSS positions.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;/img/blog/adventures-in-game-dev/post1-a.jpg&quot; alt=&quot;Positioning elements&quot;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The portals have been the biggest Javascript headache so far. There were a number of cases where the character would enter the portal and then not reappear through the next, showing no Javascript errors. Exiting the portal seemed to work differently on Chrome and Safari at times too; the current fix is to give Chrome a slight delay when the level reloads to fix the error.  This seems to be simply due to differences in rendering engines across different browsers.&lt;/p&gt;

&lt;p&gt;With Javascript being more strict than Actionscript, I’m finding that I have to change my coding approach to solve certain problems; its all part of learning. Of course I could have built this in Flash, but I wanted the game to work on mobile devices and writing it in JavaScript helps me learn a new language.&lt;/p&gt;

&lt;p&gt;You can see a prototype of the intro and entering the game area at &lt;a href=&quot;http://simonkinslow.com/_2013/bitmap_prototype/part1/&quot;&gt;simonkinslow.com/_2013/bitmap_prototype/part1/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Note: On touch devices use the weird black crab to control the character. On desktop use the arrow keys, and ideally use Chrome or Safari.&lt;/small&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 18 Dec 2013 09:00:00 +0000</pubDate>
				<link>http://labs.tmw.co.uk/2013/12/adventures-in-game-development</link>
				
				<username>@kinslowdian</username>
				<guid isPermaLink="true">http://labs.tmw.co.uk//2013/12/adventures-in-game-development</guid>
			</item>
		
			<item>
				<title>Really Good Hyperlinks #1 - Dec 11th</title>
				<description>&lt;p&gt;Welcome to the first of a regular weekly labs@tmw post, that we&#39;ve inventively called &#39;Really Good Hyperlinks&#39;, where we attempt to filter out some of the finest links we&#39;ve seen over the past week on the web.&lt;/p&gt;

&lt;p&gt;So without further ado, let&#39;s get started:&lt;/p&gt;

&lt;h2&gt;Demos&lt;/h2&gt;

&lt;h3&gt;&lt;a href=&quot;http://aerotwist.com/lab/poly-maker/&quot;&gt;PolyMaker&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Hot on the heels of redesigning his website, &lt;a href=&quot;https://twitter.com/aerotwist&quot;&gt;Paul Lewis&lt;/a&gt; has released this great canvas demo in which the user can generate their very own 3D shape by plotting 4 points on the screen.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://roboboogie.codeclub.org.uk/&quot;&gt;Robo-boogie&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Practice your dance moves before hitting the town with this demo from &lt;a href=&quot;https://www.codeclub.org.uk/&quot;&gt;Code Club&lt;/a&gt;, with which you can alter the angle and speed of animations performed by a dancing robot.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://david.li/waves/&quot;&gt;Waves&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A nice calming 3D wave demo to help reduce those Tuesday stresses.  Created using WebGL.&lt;/p&gt;

&lt;h2&gt;Articles&lt;/h2&gt;

&lt;h3&gt;&lt;a href=&quot;http://rupl.github.io/unfold/&quot;&gt;Unfolding the Box Model&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A really awesome interactive guide to CSS 3D transforms, by &lt;a href=&quot;https://twitter.com/rupl&quot;&gt;Chris Ruppel&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://oak.is/thinking/animated-svgs/&quot;&gt;Animated SVGs: custom easing and timing&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Ever wanted to animate a chart without the overhead of adding a large JS library to your site?  Well this post, by &lt;a href=&quot;https://twitter.com/mfortress&quot;&gt;Mike Fortress&lt;/a&gt;, takes us through exactly how to do so using animated SVGs.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://medium.com/design-ux/bea05243fe3&quot;&gt;Understanding Easing&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;An overview of easing in animations by &lt;a href=&quot;https://twitter.com/SureshVSelvaraj&quot;&gt;Suresh V. Selvaraj&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://martineau.tv/blog/2013/12/more-efficient-grunt-workflows/&quot;&gt;More efficient Grunt workflows&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Some essential Grunt.js tips from our very own &lt;a href=&quot;http://twitter.com/MrMartineau&quot;&gt;Zander Martineau&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Sites and services&lt;/h2&gt;

&lt;h3&gt;&lt;a href=&quot;http://import.io/&quot;&gt;Import.io&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A free service that helps turn any website into an API, allowing streaming or RESTful queries. This could be useful when used in combination with technologies like NodeJS.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://robindavey.co.uk/&quot;&gt;RobinDavey.co.uk&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Ever on the lookout for quirky animations, Robin Davey&#39;s site, showing some of his work, has some beautiful examples.  Good creative inspiration.&lt;/p&gt;

&lt;h2&gt;TMW links worth mentioning&lt;/h2&gt;

&lt;h3&gt;&lt;a href=&quot;http://www.free-ride.co.uk/&quot;&gt;Free Ride&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A little hack-project we&#39;ve been running at TMW, in which we track a bike around London by hooking it up with a GPRS tracker, and then leaving it on the streets to see where it goes.  We&#39;ll be doing a write-up on the tech behind the project shortly.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://lynxafrica18.tumblr.com/&quot;&gt;Lynx Africa Tumblr&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;To celebrate the 18th birthday for Lynx Africa, we asked 18 artists and musicians to produce work for a responsive Tumblr blog.&lt;/p&gt;
</description>
				<pubDate>Wed, 11 Dec 2013 09:00:00 +0000</pubDate>
				<link>http://labs.tmw.co.uk/2013/12/really-good-hyperlinks</link>
				
				<username>@AshNolan_</username>
				<guid isPermaLink="true">http://labs.tmw.co.uk//2013/12/really-good-hyperlinks</guid>
			</item>
		
			<item>
				<title>Introducing Kickoff</title>
				<description>&lt;p&gt;Within a large team, making sure that everyone is on the same page can be difficult; at TMW we have a team of about 20 web developers (6 are front-enders and creative technologists) and this was an issue that we needed to tackle. We create many different types of sites, from single page apps to large-scale builds like &lt;a href=&quot;http://uk.thebar.com&quot;&gt;uk.thebar.com&lt;/a&gt; or &lt;a href=&quot;http://www.bbcgoodfood.com&quot;&gt;BBC Goodfood&lt;/a&gt; and needed a framework that would work for all of them, so &lt;a href=&quot;http://twitter.com/AshNolan_&quot;&gt;Ash Nolan&lt;/a&gt; and I created &lt;a href=&quot;http://tmwagency.github.io/kickoff/&quot;&gt;Kickoff&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kickoff is a lightweight front-end framework for creating scalable, responsive sites&lt;/strong&gt;; that might sound a bit vague but it is the essence of the framework. Due to the nature of agency work, the projects are hugely varied, but as developers, we always try to cut corners to normalise things as much as possible – basically because we&#39;re lazy and we don&#39;t want to have to repeat things very often! Kickoff aims to mitigate common problems found in web development by providing a strong starting point and a set of helpful defaults for use on almost any project.&lt;/p&gt;

&lt;p&gt;The key difference of Kickoff when compared with other similar frameworks – I&#39;m looking at you &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; and &lt;a href=&quot;foundation.zurb.com&quot;&gt;Foundation&lt;/a&gt; – is that it is not nearly as prescriptive. While those frameworks define almost every aspect of a website with CSS styles and JavaScript plugins that do everything, Kickoff has most of that but does not enable it by default. For example, we have a simple grid system, but if you need something more complex or, heaven forbid, not use one, that is not a problem; just don&#39;t include it.&lt;/p&gt;

&lt;h3&gt;The tech&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://gruntjs.com&quot;&gt;Grunt&lt;/a&gt; is used extensively in Kickoff. It is the beating heart of the framework, we use it to compile our &lt;a href=&quot;http://sass-lang.com&quot;&gt;Sass&lt;/a&gt;, concatinate and then minify our JavaScript files, or to fire up a simple local server with LiveReload for some testing. Using Grunt has other benefits besides this; it allows any dev to pick up a project, regardless of if they&#39;ve worked on it before, and get up and running in no time at all. We are working on getting Grunt set-up on our Teamcity continuous integration build server but it is not ready yet - this will be a massive step forward once that&#39;s done.&lt;/p&gt;

&lt;h3&gt;How do you get your hands on it?&lt;/h3&gt;

&lt;p&gt;We have built a brochure site at &lt;a href=&quot;http://tmwagency.github.io/kickoff/&quot;&gt;tmwagency.github.io/kickoff/&lt;/a&gt; where you can find documentation and demos on various parts of the framework. If you want to grab the code, visit our Github &lt;a href=&quot;https://github.com/tmwagency/kickoff/&quot;&gt;project page&lt;/a&gt;. It is being actively maintained and we welcome suggestions and support for improvements. If you use &lt;a href=&quot;http://yeoman.io&quot;&gt;Yeoman&lt;/a&gt;, there is a &lt;a href=&quot;http://tmwagency.github.io/kickoff/docs/yeoman.html&quot;&gt;Kickoff generator&lt;/a&gt; that I created to help speed up the project creation process even more.&lt;/p&gt;

&lt;p&gt;Here are a few sites using Kickoff:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;http://www.bbcgoodfood.com&quot;&gt;BBC Goodfood&lt;/a&gt; cookery site&lt;/li&gt;
&lt;li&gt;The Western Europe version of &lt;a href=&quot;http://uk.thebar.com&quot;&gt;uk.thebar.com&lt;/a&gt; cocktail site&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://strepsils.co.uk/xfactor&quot;&gt;Strepsils Xfactor&lt;/a&gt; competition site&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://labs.tmw.co.uk&quot;&gt;labs.tmw.co.uk&lt;/a&gt; - Woop Woop!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We are very proud of Kickoff, it has helped our team become more efficient, improving workflow throughout the department. Just give it a try on your projects and let us know how you get on.&lt;/p&gt;
</description>
				<pubDate>Tue, 10 Dec 2013 10:00:00 +0000</pubDate>
				<link>http://labs.tmw.co.uk/2013/12/introducing-kickoff</link>
				
				<username>@mrmartineau</username>
				<guid isPermaLink="true">http://labs.tmw.co.uk//2013/12/introducing-kickoff</guid>
			</item>
		
			<item>
				<title>It’s alive!</title>
				<description>&lt;p&gt;After far too long thinking about putting together a dedicated TMW labs blog, we’ve finally put up our very own MVP.&lt;/p&gt;

&lt;p&gt;The aim of this blog is to have somewhere that the creative tech team at TMW can talk more openly about the design and tech behind the projects and sites we’re working on; the main TMW blog didn’t seem like the best place to talk about serious tech.  It also gives us somewhere to discuss how we work and what we learn in the process.&lt;/p&gt;

&lt;h2&gt;What next…&lt;/h2&gt;

&lt;p&gt;We have lots of ideas around how we’d like the site to grow, but that’s for the future; for now we’re aiming to post regular updates from across the team and let the rest follow.&lt;/p&gt;

&lt;p&gt;We also now have a &lt;a href=&quot;https://twitter.com/tmw_labs&quot;&gt;TMW Labs&lt;/a&gt; Twitter account, so if anyone wants to get in touch with us directly, we’re all ears.&lt;/p&gt;

&lt;p&gt;So that’s it really - the difficult first post.  To celebrate, here’s a dog gif...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/dog.gif&quot; alt=&quot;Dog going nuts over an exercise ball&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Tue, 03 Dec 2013 00:00:00 +0000</pubDate>
				<link>http://labs.tmw.co.uk/2013/12/its-alive</link>
				
				<username>@AshNolan_</username>
				<guid isPermaLink="true">http://labs.tmw.co.uk//2013/12/its-alive</guid>
			</item>
		
	</channel>
</rss>